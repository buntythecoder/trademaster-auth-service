server:
  port: ${SERVER_PORT:8083}
  compression:
    enabled: true
  http2:
    enabled: true
  threads:
    virtual:
      enabled: true # Java 24 Virtual Threads

spring:
  application:
    name: portfolio-service
    
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:development}
    
  threads:
    virtual:
      enabled: true # Rule #1: MANDATORY Virtual Threads
    
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/trademaster_portfolio}
    username: ${DB_USERNAME:trademaster}
    password: ${DB_PASSWORD:trademaster123}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_SIZE:20}
      minimum-idle: ${DB_MIN_IDLE:5}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
      idle-timeout: ${DB_IDLE_TIMEOUT:600000}
      max-lifetime: ${DB_MAX_LIFETIME:1800000}
      
  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:validate}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        show_sql: false
        jdbc:
          batch_size: ${JPA_BATCH_SIZE:25}
          order_inserts: true
          order_updates: true
        cache:
          use_second_level_cache: true
          use_query_cache: true
          region:
            factory_class: org.hibernate.cache.jcache.JCacheRegionFactory
    open-in-view: false
    
  flyway:
    enabled: ${FLYWAY_ENABLED:true}
    locations: classpath:db/migration
    baseline-on-migrate: true
    baseline-version: 1
    
  cache:
    type: redis
    redis:
      time-to-live: ${CACHE_TTL:300000} # 5 minutes
      
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: ${REDIS_TIMEOUT:2000ms}
      lettuce:
        pool:
          max-active: ${REDIS_POOL_MAX_ACTIVE:8}
          max-idle: ${REDIS_POOL_MAX_IDLE:8}
          min-idle: ${REDIS_POOL_MIN_IDLE:0}
          
  jackson:
    serialization:
      write-dates-as-timestamps: false
      indent-output: true
    deserialization:
      fail-on-unknown-properties: false
    default-property-inclusion: non_null
    
  security:
    enabled: true

# TradeMaster Common Service Library Configuration
trademaster:
  common:
    service:
      name: ${spring.application.name}
      version: 1.0.0
      description: "Portfolio Management Service with real-time P&L calculations and risk analytics"
      environment: ${SPRING_PROFILES_ACTIVE:development}

    security:
      enabled: true
      service-api-key: ${PORTFOLIO_SERVICE_API_KEY:portfolio-service-secret-key}
      jwt-secret: ${JWT_SECRET:TradeMasterPortfolioServiceSecretKey2024!}
      jwt-expiration-ms: 900000 # 15 minutes
      jwt-refresh-expiration-ms: 86400000 # 24 hours
      internal-paths:
        - /api/internal/**
        - /internal/**
      public-paths:
        - /actuator/**
        - /swagger-ui/**
        - /api-docs/**
        - /api/v2/health
      known-services:
        auth-service: "auth-service"
        trading-service: "trading-service"
        broker-auth-service: "broker-auth-service"
        event-bus-service: "event-bus-service"

    kong:
      enabled: ${KONG_ENABLED:true}
      admin-url: ${KONG_ADMIN_URL:http://kong:8001}
      gateway-url: ${KONG_GATEWAY_URL:http://kong:8000}
      service-name: trademaster-portfolio-service
      service-url: http://portfolio-service:8083
      headers:
        consumer-id: "X-Consumer-ID"
        consumer-username: "X-Consumer-Username"
        api-key: "X-API-Key"

    consul:
      enabled: ${CONSUL_ENABLED:true}
      host: ${CONSUL_HOST:consul}
      port: ${CONSUL_PORT:8500}
      service-name: portfolio-service
      health-check-interval: "10s"
      health-check-path: "/actuator/health"
      datacenter: "trademaster-dc"
      tags:
        - "portfolio"
        - "finance"
        - "trademaster"

    health:
      detailed-enabled: true
      circuit-breaker-enabled: true
      kong-status-enabled: true
      consul-status-enabled: true
      performance-metrics-enabled: true

    internal-client:
      connection-timeout: 5000
      read-timeout: 10000
      max-connections: 100
      max-connections-per-route: 20
      circuit-breaker-enabled: true
      services:
        auth-service:
          base-url: ${AUTH_SERVICE_URL:http://localhost:8080}
          health-check-path: /api/internal/health
        trading-service:
          base-url: ${TRADING_SERVICE_URL:http://localhost:8082}
          health-check-path: /api/internal/health
        broker-auth-service:
          base-url: ${BROKER_AUTH_SERVICE_URL:http://localhost:8084}
          health-check-path: /api/internal/health
        event-bus-service:
          base-url: ${EVENT_BUS_SERVICE_URL:http://localhost:8085}
          health-check-path: /api/internal/health

    openapi:
      enabled: true
      title: "TradeMaster Portfolio Management API"
      description: "Comprehensive portfolio management service with real-time position tracking, P&L calculations, and risk analytics"
      version: "2.0.0"
      contact:
        name: "TradeMaster Development Team"
        email: "dev@trademaster.com"
      servers:
        - url: "http://localhost:8083"
          description: "Development"
        - url: "http://portfolio-service:8083"
          description: "Docker"

# Rule #25: Circuit Breaker Configuration moved to trademaster.portfolio section below

# Management & Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,loggers,circuitbreakers
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
    circuitbreakers:
      enabled: true # Circuit breaker monitoring
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
        "[resilience4j.circuitbreaker.calls]": true
      percentiles:
        "[http.server.requests]": 0.5, 0.95, 0.99
        "[resilience4j.circuitbreaker.calls]": 0.5, 0.95, 0.99
  health:
    redis:
      enabled: true
    db:
      enabled: true
    circuitbreakers:
      enabled: true

# Logging Configuration
logging:
  level:
    com.trademaster.portfolio: ${LOG_LEVEL:INFO}
    org.springframework.security: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
    org.springframework.web: WARN
    io.github.resilience4j: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%logger{36}] [%X{correlationId}] - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%logger{36}] [%X{correlationId}] - %msg%n"
  file:
    name: logs/portfolio-service.log
    max-size: ${LOG_FILE_MAX_SIZE:100MB}
    max-history: ${LOG_FILE_MAX_HISTORY:30}

# AgentOS Configuration - Rule #26: Configuration validation
agentos:
  agent:
    id: portfolio-agent
    type: PORTFOLIO
    capabilities:
      position-tracking:
        proficiency: EXPERT
        max-concurrent-requests: ${AGENTOS_POSITION_MAX_REQUESTS:500}
        timeout-ms: ${AGENTOS_POSITION_TIMEOUT:10}
        resource-requirements: ["Memory:high", "CPU:medium"]
      performance-analytics:
        proficiency: EXPERT
        max-concurrent-requests: ${AGENTOS_ANALYTICS_MAX_REQUESTS:200}
        timeout-ms: ${AGENTOS_ANALYTICS_TIMEOUT:25}
        resource-requirements: ["CPU:high", "Memory:medium"]
      risk-assessment:
        proficiency: ADVANCED
        max-concurrent-requests: ${AGENTOS_RISK_MAX_REQUESTS:100}
        timeout-ms: ${AGENTOS_RISK_TIMEOUT:200}
        resource-requirements: ["CPU:high", "Memory:high"]
      asset-allocation:
        proficiency: ADVANCED
        max-concurrent-requests: ${AGENTOS_ALLOCATION_MAX_REQUESTS:50}
        timeout-ms: ${AGENTOS_ALLOCATION_TIMEOUT:1000}
        resource-requirements: ["CPU:high", "Memory:medium"]
      portfolio-reporting:
        proficiency: INTERMEDIATE
        max-concurrent-requests: ${AGENTOS_REPORTING_MAX_REQUESTS:25}
        timeout-ms: ${AGENTOS_REPORTING_TIMEOUT:5000}
        resource-requirements: ["CPU:medium", "Memory:medium", "Storage:high"]
    health:
      check-interval-seconds: ${AGENTOS_HEALTH_INTERVAL:30}
      performance-window-minutes: ${AGENTOS_HEALTH_WINDOW:5}
      min-health-score: ${AGENTOS_MIN_HEALTH_SCORE:0.7}

# Portfolio Service Configuration
  portfolio:
    # Rule #25: Circuit Breaker Configuration - MANDATORY
    circuit-breaker:
      failure-rate-threshold: ${CB_FAILURE_RATE:50.0}
      wait-duration-in-open-state: ${CB_WAIT_DURATION:PT60S}
      sliding-window-size: ${CB_SLIDING_WINDOW:10}
      minimum-number-of-calls: ${CB_MIN_CALLS:5}
      slow-call-rate-threshold: ${CB_SLOW_RATE:100.0}
      slow-call-duration-threshold: ${CB_SLOW_DURATION:PT5S}
      permitted-calls-in-half-open-state: ${CB_HALF_OPEN_CALLS:3}
      automatic-transition-enabled: ${CB_AUTO_TRANSITION:true}
      metrics-enabled: ${CB_METRICS_ENABLED:true}
      event-logging-enabled: ${CB_EVENT_LOGGING:true}

    # P&L Calculation Settings
    pnl:
      calculation-interval: ${PNL_CALCULATION_INTERVAL:PT1M} # 1 minute
      batch-size: ${PNL_BATCH_SIZE:100}
      enable-real-time-updates: ${PNL_REAL_TIME:true}
      
    # Risk Management Settings
    risk:
      var-confidence-level: ${RISK_VAR_CONFIDENCE:0.95}
      stress-test-scenarios: 
        - MARKET_CRASH
        - INTEREST_RATE_SHOCK
        - CURRENCY_DEVALUATION
      concentration-limit: ${RISK_CONCENTRATION_LIMIT:0.20} # 20% max position
      
    # Performance Settings
    performance:
      enable-virtual-threads: ${PERF_VIRTUAL_THREADS:true}
      max-concurrent-calculations: ${PERF_MAX_CONCURRENT:1000}
      calculation-timeout: ${PERF_CALC_TIMEOUT:PT30S} # 30 seconds
      
    # Cache Settings
    cache:
      portfolio-ttl: ${CACHE_PORTFOLIO_TTL:PT5M} # 5 minutes
      position-ttl: ${CACHE_POSITION_TTL:PT1M} # 1 minute
      analytics-ttl: ${CACHE_ANALYTICS_TTL:PT15M} # 15 minutes
      
    # Integration Settings
    integration:
      trading-service:
        url: ${TRADING_SERVICE_URL:http://localhost:8082}
        timeout: ${TRADING_SERVICE_TIMEOUT:PT10S}
        retry-attempts: ${TRADING_SERVICE_RETRIES:3}
      market-data-service:
        url: ${MARKET_DATA_SERVICE_URL:http://localhost:8081}
        timeout: ${MARKET_DATA_SERVICE_TIMEOUT:PT5S}
        retry-attempts: ${MARKET_DATA_SERVICE_RETRIES:2}
      auth-service:
        url: ${AUTH_SERVICE_URL:http://localhost:8080}
        timeout: ${AUTH_SERVICE_TIMEOUT:PT5S}
        
  # JWT Configuration
  jwt:
    secret: ${JWT_SECRET:TradeMasterPortfolioServiceSecretKey2024!}
    expiration: ${JWT_EXPIRATION:86400000} # 24 hours in milliseconds
    issuer: trademaster-portfolio-service
    
  # Security Configuration
  security:
    cors:
      allowed-origins: 
        - ${CORS_ALLOWED_ORIGIN_1:http://localhost:3000}
        - ${CORS_ALLOWED_ORIGIN_2:http://localhost:8080}
      allowed-methods: 
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowed-headers: "*"
      allow-credentials: true
      max-age: ${CORS_MAX_AGE:3600}

# Resilience4j Configuration - Rule #25: Circuit Breaker Implementation
resilience4j:
  circuitbreaker:
    instances:
      database:
        failure-rate-threshold: 70
        wait-duration-in-open-state: PT30S
        slow-call-rate-threshold: 100
        slow-call-duration-threshold: PT2S
        permitted-number-of-calls-in-half-open-state: 3
        sliding-window-size: 10
        minimum-number-of-calls: 5
      marketData:
        failure-rate-threshold: 60
        wait-duration-in-open-state: PT60S
        slow-call-rate-threshold: 100
        slow-call-duration-threshold: PT5S
        permitted-number-of-calls-in-half-open-state: 3
        sliding-window-size: 10
        minimum-number-of-calls: 5
      brokerApi:
        failure-rate-threshold: 50
        wait-duration-in-open-state: PT120S
        slow-call-rate-threshold: 100
        slow-call-duration-threshold: PT10S
        permitted-number-of-calls-in-half-open-state: 3
        sliding-window-size: 10
        minimum-number-of-calls: 5
      messageQueue:
        failure-rate-threshold: 80
        wait-duration-in-open-state: PT45S
        slow-call-rate-threshold: 100
        slow-call-duration-threshold: PT3S
        permitted-number-of-calls-in-half-open-state: 3
        sliding-window-size: 10
        minimum-number-of-calls: 5
      fileIo:
        failure-rate-threshold: 75
        wait-duration-in-open-state: PT15S
        slow-call-rate-threshold: 100
        slow-call-duration-threshold: PT1S
        permitted-number-of-calls-in-half-open-state: 3
        sliding-window-size: 10
        minimum-number-of-calls: 5
  retry:
    instances:
      default:
        max-attempts: 3
        wait-duration: PT500MS
        exponential-backoff-multiplier: 2
  timelimiter:
    instances:
      default:
        timeout-duration: PT10S

# SpringDoc OpenAPI Configuration
springdoc:
  api-docs:
    enabled: ${SWAGGER_ENABLED:true}
    path: /api-docs
  swagger-ui:
    enabled: ${SWAGGER_UI_ENABLED:true}
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  info:
    title: "TradeMaster Portfolio Management API"
    description: "Comprehensive portfolio management service with real-time position tracking, P&L calculations, and risk analytics"
    version: "2.0.0"
    contact:
      name: "TradeMaster Development Team"
      email: "dev@trademaster.com"
    license:
      name: "Proprietary"

---
# Development Profile
spring:
  config:
    activate:
      on-profile: development
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        show_sql: false
        format_sql: true
  cache:
    type: simple # Use simple cache for development
  data:
    redis:
      host: localhost
      port: 6379

logging:
  level:
    com.trademaster.portfolio: DEBUG
    org.springframework.security: DEBUG

trademaster:
  portfolio:
    cache:
      portfolio-ttl: PT30S # 30 seconds for faster development
      position-ttl: PT10S # 10 seconds for faster development

---
# Test Profile
spring:
  config:
    activate:
      on-profile: test
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: 
  jpa:
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
  flyway:
    enabled: false
  cache:
    type: simple
    
logging:
  level:
    com.trademaster.portfolio: DEBUG
    
---
# Production Profile
spring:
  config:
    activate:
      on-profile: production
  jpa:
    properties:
      hibernate:
        show_sql: false
        format_sql: false
  cache:
    redis:
      time-to-live: 600000 # 10 minutes in production

logging:
  level:
    com.trademaster.portfolio: INFO
    org.springframework.security: WARN
    
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,circuitbreakers

trademaster:
  portfolio:
    performance:
      max-concurrent-calculations: 5000 # Higher for production
    cache:
      portfolio-ttl: PT10M # 10 minutes
      position-ttl: PT2M # 2 minutes
      analytics-ttl: PT30M # 30 minutes

---
# Docker Profile
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: jdbc:postgresql://postgres:5432/trademaster_portfolio
  data:
    redis:
      host: redis
      port: 6379

trademaster:
  portfolio:
    integration:
      trading-service:
        url: http://trading-service:8082
      market-data-service:
        url: http://market-data-service:8081
      auth-service:
        url: http://auth-service:8080