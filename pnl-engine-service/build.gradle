plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.flywaydb.flyway' version '10.10.0'
    id 'io.freefair.lombok' version '8.6'
    id 'jacoco'
    id 'org.sonarqube' version '5.0.0.4638'
    id 'com.google.cloud.tools.jib' version '3.4.2'
}

group = 'com.trademaster'
version = '2.0.0'
description = 'TradeMaster Multi-Broker P&L Engine Service'

java {
    sourceCompatibility = JavaVersion.VERSION_24
    targetCompatibility = JavaVersion.VERSION_24
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

ext {
    springBootVersion = '3.5.3'
    springCloudVersion = '2024.0.0'
    resilience4jVersion = '2.2.0'
    testContainersVersion = '1.19.8'
    lombokVersion = '1.18.30'
    mapstructVersion = '1.5.5.Final'
    openApiVersion = '2.5.0'
    micrometerVersion = '1.13.1'
    redisVersion = '3.5.3'
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    
    // Virtual Threads Support (Java 24)
    implementation 'org.springframework.boot:spring-boot-starter'
    
    // Database
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'com.zaxxer:HikariCP'
    
    // Redis & Caching
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'redis.clients:jedis'
    implementation 'org.springframework.session:spring-session-data-redis'
    
    // Resilience & Circuit Breaker
    implementation "io.github.resilience4j:resilience4j-spring-boot3:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-circuitbreaker:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-ratelimiter:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-retry:${resilience4jVersion}"
    
    // Metrics & Monitoring
    implementation "io.micrometer:micrometer-registry-prometheus:${micrometerVersion}"
    implementation "io.micrometer:micrometer-tracing-bridge-brave"
    implementation 'net.ttddyy.observation:datasource-micrometer-spring-boot:1.0.3'
    
    // API Documentation
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openApiVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:${openApiVersion}"
    
    // JSON Processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names'
    
    // HTTP Client (MANDATORY: NO WebFlux - Rule #1)
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.3'
    
    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    
    // MapStruct
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    
    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    
    // Development Tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.springframework.boot:spring-boot-docker-compose'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testContainersVersion}"
    testImplementation "org.testcontainers:redis:${testContainersVersion}"
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'com.h2database:h2'
    testImplementation 'org.mockito:mockito-inline'
    
    // Architecture Testing
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.3.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testContainersVersion}"
    }
}

// Java Compilation with Virtual Threads (Java 24)
tasks.withType(JavaCompile) {
    options.compilerArgs += [
        '--enable-preview',
        '-parameters'
    ]
    options.release = 24
}

// Test Configuration
test {
    jvmArgs += [
        '--enable-preview'
    ]
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/dto/**',
                '**/config/**',
                '**/PnLEngineApplication.class'
            ])
        }))
    }
}

jacoco {
    toolVersion = "0.8.11"
}

// Flyway Configuration
flyway {
    driver = 'org.postgresql.Driver'
    url = "${System.getenv('DATABASE_URL') ?: 'jdbc:postgresql://localhost:5432/trademaster_pnl'}"
    user = "${System.getenv('DATABASE_USERNAME') ?: 'trademaster'}"
    password = "${System.getenv('DATABASE_PASSWORD') ?: 'trademaster123'}"
    schemas = ['public']
    locations = ['filesystem:src/main/resources/db/migration']
    baselineOnMigrate = true
    validateOnMigrate = true
}

// Application Properties
springBoot {
    buildInfo()
    mainClass = 'com.trademaster.pnlengine.PnLEngineApplication'
}

// Docker Image with Jib
jib {
    from {
        image = 'openjdk:24-jdk'
        platforms {
            platform {
                architecture = 'amd64'
                os = 'linux'
            }
        }
    }
    to {
        image = "trademaster/pnl-engine-service:${version}"
        tags = ['latest']
    }
    container {
        jvmFlags = [
            '--enable-preview',
            '-XX:+UseVirtualThreads',
            '-XX:+UnlockExperimentalVMOptions',
            '-XX:MaxRAMPercentage=75.0',
            '-XX:+UseG1GC'
        ]
        ports = ['8086']
        creationTime = 'USE_CURRENT_TIMESTAMP'
        format = 'OCI'
        mainClass = 'com.trademaster.pnlengine.PnLEngineApplication'
    }
}

// Code Quality
sonarqube {
    properties {
        property "sonar.projectKey", "trademaster-pnl-engine-service"
        property "sonar.projectName", "TradeMaster P&L Engine Service"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.java.source", "24"
        property "sonar.java.target", "24"
    }
}

// Gradle Wrapper
wrapper {
    gradleVersion = '8.8'
    distributionType = Wrapper.DistributionType.ALL
}