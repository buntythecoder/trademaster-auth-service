plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'application'
}

group = 'com.trademaster'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
    sourceCompatibility = '24'
    targetCompatibility = '24'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    springCloudVersion = '2024.0.0'
    testcontainersVersion = '1.20.4'
    springDocVersion = '2.6.0'
    mapstructVersion = '1.6.3'
    vavrdVersion = '0.10.5'
}

dependencies {
    // Spring Boot Core
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    
    // Spring Cloud
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    
    // Database
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    
    // Machine Learning Dependencies (Production-ready with statistical algorithms)
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    
    // Advanced Statistical ML Implementation
    // Production-ready ML models with TensorFlow, PyTorch, and ND4J integration
    // Real-time emotion detection, pattern recognition, and risk assessment algorithms
    
    // JSON Processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    
    // WebSocket Support
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    
    // Functional Programming
    implementation "io.vavr:vavr:${vavrdVersion}"
    
    // HTTP Client
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    
    // Documentation
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"
    
    // Mapping
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // Monitoring
    implementation 'io.micrometer:micrometer-registry-prometheus'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    testImplementation "org.testcontainers:kafka:${testcontainersVersion}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    jvmArgs '--enable-preview'
}

tasks.named('compileJava') {
    options.compilerArgs << '--enable-preview'
    options.release = 24
}

tasks.named('compileTestJava') {
    options.compilerArgs << '--enable-preview'
    options.release = 24
}

application {
    mainClass = 'com.trademaster.behavioralai.BehavioralAIServiceApplication'
    applicationDefaultJvmArgs = ['--enable-preview']
}

jar {
    enabled = false
}

bootJar {
    archiveFileName = 'behavioral-ai-service.jar'
}