# TradeMaster Behavioral AI Service Configuration
# Production-ready Spring Boot 3.5.3 configuration with virtual threads

server:
  port: 8080
  servlet:
    context-path: /behavioral-ai
  netty:
    connection-timeout: 20s
  compression:
    enabled: true
    min-response-size: 1KB

# Spring Configuration
spring:
  application:
    name: behavioral-ai-service
  
  # Virtual Threads Configuration (MANDATORY per TradeMaster rules)
  threads:
    virtual:
      enabled: true
  
  # Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/trademaster_behavioral_ai
    username: ${DB_USERNAME:trademaster}
    password: ${DB_PASSWORD:trademaster123}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      leak-detection-threshold: 60000
      pool-name: BehavioralAI-HikariCP
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: false
        jdbc:
          batch_size: 25
        cache:
          use_second_level_cache: true
          use_query_cache: true
          region:
            factory_class: org.hibernate.cache.jcache.JCacheRegionFactory
  
  # Flyway Migration
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
  
  # Redis Configuration
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    timeout: 2000ms
    jedis:
      pool:
        max-active: 50
        max-idle: 20
        min-idle: 5
        max-wait: 2000ms
  
  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 600000  # 10 minutes
      cache-null-values: false
  
  # Security Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8081/auth/realms/trademaster}
          jwk-set-uri: ${JWT_JWK_SET_URI:http://localhost:8081/auth/realms/trademaster/protocol/openid-connect/certs}
  
  # Jackson JSON Configuration
  jackson:
    serialization:
      write-dates-as-timestamps: false
      indent-output: false
    deserialization:
      fail-on-unknown-properties: false
    time-zone: UTC
    default-property-inclusion: NON_NULL

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
      percentiles-histogram:
        http.server.requests: true

# Behavioral AI Service Configuration
behavioral-ai:
  # Emotion Detection Settings
  emotion:
    confidence-threshold: 0.7
    analysis-timeout-ms: 100
    feature-count: 20
  
  # Pattern Detection Settings
  patterns:
    detection-threshold: 0.75
    max-patterns-per-session: 10
    analysis-window-hours: 24
  
  # Coaching Settings
  coaching:
    max-interventions-per-hour: 5
    effectiveness-threshold: 0.6
    cool-down-minutes: 15
  
  # Feature Extraction Settings
  features:
    extraction-timeout-ms: 50
    min-data-points: 10
  
  # Statistical Analysis Settings (NOT ML Models)
  statistics:
    algorithms:
      emotion-analysis-enabled: true
      pattern-detection-enabled: true
      risk-assessment-enabled: true
    performance:
      target-analysis-latency-ms: 50
      target-pattern-latency-ms: 100
      target-risk-latency-ms: 75
      statistical-accuracy-threshold: 0.75

# Logging Configuration
logging:
  level:
    com.trademaster.behavioralai: INFO
    org.springframework.security: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
    org.springframework.web: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId}] %logger{36} - %msg%n"
  file:
    name: logs/behavioral-ai-service.log
    max-size: 100MB
    max-history: 30

# OpenAPI Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tags-sorter: alpha
  info:
    title: TradeMaster Behavioral Analysis Service
    description: Statistical behavioral analysis and coaching patterns for trading platforms using advanced mathematical algorithms
    version: 1.0.0
    contact:
      name: TradeMaster Development Team
      email: dev@trademaster.com
    license:
      name: Proprietary
  servers:
    - url: http://localhost:8080/behavioral-ai
      description: Development server
    - url: https://api.trademaster.com/behavioral-ai
      description: Production server

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      ml-service:
        sliding-window-size: 100
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        minimum-number-of-calls: 10
  retry:
    instances:
      database:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
  timelimiter:
    instances:
      ml-processing:
        timeout-duration: 5s
        cancel-running-future: true

# Custom Application Properties
app:
  security:
    cors:
      allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:3001}
      allowed-methods: GET,POST,PUT,DELETE,OPTIONS
      allowed-headers: "*"
      allow-credentials: true
      max-age: 3600
  
  async:
    core-pool-size: 10
    max-pool-size: 50
    queue-capacity: 100
    thread-name-prefix: BehavioralAI-Async-
  
  monitoring:
    enabled: true
    metrics-interval: 30s
    health-check-interval: 60s