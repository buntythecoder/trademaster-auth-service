server:
  port: 8080
#  servlet:
#    context-path: /api/v1  # Removed - controllers already have /api/v1 prefix
  error:
    include-message: always
    include-binding-errors: always
  compression:
    enabled: true
  http2:
    enabled: true
  ssl:
    enabled: ${SSL_ENABLED:false}
    key-store: ${SSL_KEYSTORE_PATH:classpath:keystore/auth-service.p12}
    key-store-password: ${SSL_KEYSTORE_PASSWORD:changeit}
    key-store-type: PKCS12
    key-alias: ${SSL_KEY_ALIAS:auth-service}
    protocol: TLS
    enabled-protocols: TLSv1.3,TLSv1.2

spring:
  application:
    name: trademaster-auth-service
    version: 1.0.0

  config:
    import: "optional:consul:"

  threads:
    virtual:
      enabled: true

  profiles:
    active: dev

  main:
    allow-bean-definition-overriding: true

  datasource:
    url: jdbc:postgresql://localhost:5432/trademaster_auth
    username: ${DB_USERNAME:trademaster_user}
    password: ${DB_PASSWORD:trademaster_password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      max-lifetime: 1200000
      leak-detection-threshold: 60000

  mail:
    host: ${MAIL_HOST:localhost}
    port: ${MAIL_PORT:1025}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: false
          starttls:
            enable: false
    test-connection: false

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        use_sql_comments: false
        jdbc:
          batch_size: 25
        order_inserts: true
        order_updates: true

  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: false
    validate-on-migrate: false
    check-location: false
    fail-on-missing-locations: false
    oracle-sqlplus: false
    oracle-sqlplus-warn: false
    skip-default-callbacks: false
    skip-default-resolvers: false
    ignore-future-migrations: true
    ignore-ignored-migrations: false
    ignore-pending-migrations: false
    ignore-missing-migrations: false
    cherry-pick: []
    
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms
        
  session:
    store-type: redis
    timeout: 24h
    redis:
      namespace: trademaster:sessions

  cache:
    type: redis
    redis:
      time-to-live: 3600000

  security:
    require-ssl: false

logging:
  level:
    com.trademaster: INFO
    org.springframework.security: DEBUG
    org.springframework.web: INFO
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/auth-service.log
    max-size: 10MB
    max-history: 30

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when_authorized
  health:
    mail:
      enabled: false
    show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
        
trademaster:
  security:
    service:
      api-key: ${TRADEMASTER_SERVICE_API_KEY:pTB9KkzqJWNkFDUJHIFyDv5b1tSUpP4q}
      enabled: ${SERVICE_AUTH_ENABLED:true}
    rate-limit:
      authenticated: ${RATE_LIMIT_AUTHENTICATED:1000} # per minute
      free-tier: ${RATE_LIMIT_FREE:100} # per minute
      premium: ${RATE_LIMIT_PREMIUM:5000} # per minute
    session:
      max-concurrent: ${MAX_CONCURRENT_SESSIONS:5}
      timeout: ${SESSION_TIMEOUT:1440} # 24 hours in minutes

  jwt:
    secret: ${JWT_SECRET:your-256-bit-secret-key-here-change-in-production}
    expiration: ${JWT_EXPIRATION:900000} # 15 minutes
    refresh-expiration: ${JWT_REFRESH_EXPIRATION:86400000} # 24 hours
    issuer: trademaster-auth-service
      
  # Endpoint-specific rate limiting configuration
  rate-limit:
    login:
      requests: ${LOGIN_RATE_LIMIT:5} # requests per window
      window-minutes: ${LOGIN_RATE_WINDOW:1} # 1 minute window
    registration:
      requests: ${REGISTRATION_RATE_LIMIT:3} # requests per window
      window-minutes: ${REGISTRATION_RATE_WINDOW:60} # 1 hour window
    password-reset:
      requests: ${PASSWORD_RESET_RATE_LIMIT:2} # requests per window
      window-minutes: ${PASSWORD_RESET_RATE_WINDOW:60} # 1 hour window
    email-verification:
      requests: ${EMAIL_VERIFICATION_RATE_LIMIT:10} # requests per window
      window-minutes: ${EMAIL_VERIFICATION_RATE_WINDOW:60} # 1 hour window
      
  encryption:
    algorithm: AES/GCM/NoPadding
    key-length: 256
    
  mfa:
    enabled: true
    token-validity: 300 # 5 minutes
    
  aws:
    region: ${AWS_REGION:us-east-1}
    kms:
      key-id: ${AWS_KMS_KEY_ID:alias/trademaster-encryption-key}
      
  audit:
    enabled: true
    retention-days: 2555 # 7 years for financial compliance
    
  compliance:
    sebi:
      enabled: true
      audit-level: DETAILED
      
---
spring:
  config:
    activate:
      on-profile: dev

  jpa:
    hibernate:
      ddl-auto: validate  # Use validate in dev too for consistency
    show-sql: true
    properties:
      hibernate:
        generate_statistics: true
        
logging:
  level:
    com.trademaster: DEBUG
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    
---
spring:
  config:
    activate:
      on-profile: prod

  datasource:
    hikari:
      maximum-pool-size: 50

  security:
    require-ssl: true

  # Consul Service Discovery Configuration
  cloud:
    consul:
      enabled: ${CONSUL_ENABLED:true}
      host: ${CONSUL_HOST:localhost}
      port: ${CONSUL_PORT:8500}
      discovery:
        enabled: ${CONSUL_DISCOVERY_ENABLED:true}
        register: ${CONSUL_REGISTER:true}
        deregister: ${CONSUL_DEREGISTER:true}
        prefer-ip-address: true
        ip-address: ${CONSUL_IP_ADDRESS:}
        hostname: ${CONSUL_HOSTNAME:}
        port: ${server.port:8080}
        health-check-path: /actuator/health
    
logging:
  level:
    com.trademaster: INFO
    org.springframework.security: WARN
    root: WARN

# Kong API Gateway Configuration
kong:
  admin:
    url: ${KONG_ADMIN_URL:http://kong:8001}
    auth:
      enabled: ${KONG_ADMIN_AUTH_ENABLED:false}
      token: ${KONG_ADMIN_TOKEN:}
  gateway:
    url: ${KONG_GATEWAY_URL:http://kong:8000}
  service:
    name: ${KONG_SERVICE_NAME:trademaster-auth-service}
    url: ${KONG_SERVICE_URL:http://auth-service:8080}
  jwt:
    secret: ${KONG_JWT_SECRET:your-256-bit-secret-key-here-change-in-production}
    issuer: ${KONG_JWT_ISSUER:trademaster-auth-service}

# TradeMaster Golden Specification Configuration
trademaster:
  # Performance Monitoring & SLA Configuration
  performance:
    sla:
      critical.ms: 25      # Critical auth operations: ≤25ms SLA
      high.ms: 50          # High priority operations: ≤50ms SLA
      standard.ms: 100     # Standard operations: ≤100ms SLA
      background.ms: 500   # Background operations: ≤500ms SLA
      jwt.ms: 10           # JWT operations: ≤10ms for cached tokens
      database.ms: 10      # Database operations: ≤10ms per operation
    monitoring:
      enabled: true
      report-interval: 60s # SLA compliance reporting interval
      alert-threshold: 95  # Alert when SLA compliance drops below 95%

  # Service URLs for Internal Communication
  services:
    trading-service:
      url: ${TRADING_SERVICE_URL:http://trading-service:8083}
    broker-auth-service:
      url: ${BROKER_AUTH_SERVICE_URL:http://broker-auth-service:8084}
    subscription-service:
      url: ${SUBSCRIPTION_SERVICE_URL:http://subscription-service:8085}
    portfolio-service:
      url: ${PORTFOLIO_SERVICE_URL:http://portfolio-service:8086}
    notification-service:
      url: ${NOTIFICATION_SERVICE_URL:http://notification-service:8087}

  # Kong API Gateway Integration per Golden Specification
  security:
    kong:
      # Kong Consumer Headers for Internal API Authentication
      headers:
        consumer-id: X-Consumer-ID
        consumer-username: X-Consumer-Username
        consumer-custom-id: X-Consumer-Custom-ID
        api-key: X-API-Key

      # Service API Key Configuration
      service-keys:
        trading-service: ${TRADING_SERVICE_API_KEY:}
        broker-auth-service: ${BROKER_AUTH_SERVICE_API_KEY:}
        subscription-service: ${SUBSCRIPTION_SERVICE_API_KEY:}
        portfolio-service: ${PORTFOLIO_SERVICE_API_KEY:}
        notification-service: ${NOTIFICATION_SERVICE_API_KEY:}
        monitoring-service: ${MONITORING_SERVICE_API_KEY:}

      # Kong Service Configuration for Registration
      upstream:
        name: auth-service
        url: http://localhost:${server.port}
        health-check-url: /actuator/health
        routes:
          external:
            path: /api/v1/auth
            methods: [GET, POST, PUT, DELETE]
            strip-path: false
          internal:
            path: /api/internal/v1/auth
            methods: [GET, POST, PUT, DELETE]
            strip-path: false


    # Enhanced Security Configuration
    cache:
      ttl: 900s  # 15 minutes JWT cache TTL

  # HTTP Client Configuration
  http:
    connection-pool:
      max-total: 50          # Max total connections for auth service
      max-per-route: 25      # Max connections per route
      validate-after-inactivity: 2000  # Connection validation interval (ms)
    timeout:
      connection: 5000       # Connection timeout for auth operations (ms)
      socket: 10000          # Socket timeout for external calls (ms)
      request: 8000          # Request timeout for internal calls (ms)
    keep-alive:
      duration: 30000        # Keep-alive duration (ms)

  # Service identification for internal communication
  service:
    name: auth-service

# Enhanced Management Configuration per Golden Specification
management:
  server:
    port: ${MANAGEMENT_SERVER_PORT:9080}  # Separate port for management endpoints
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,threaddump,heapdump,configprops,refresh,beans,readiness,liveness
      base-path: /actuator
      path-mapping:
        health: health
        info: info
        readiness: ready
        liveness: alive
      cors:
        allowed-origins: "*"
        allowed-methods: GET,POST
  endpoint:
    health:
      enabled: true
      show-details: always
      show-components: always
      probes:
        enabled: true
      group:
        readiness:
          include: readinessState,db,redis
          exclude: mail
        liveness:
          include: livenessState,diskSpace,ping
          exclude: mail
    metrics:
      enabled: true
    prometheus:
      enabled: true
    refresh:
      enabled: true
    configprops:
      enabled: true
      show-values: always
  health:
    config:
      enabled: true
    refresh:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
        step: 30s
        descriptions: true
    distribution:
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
        auth.jwt.duration: 0.5, 0.95, 0.99
        auth.login.duration: 0.5, 0.95, 0.99
        auth.validation.duration: 0.5, 0.95, 0.99
      slo:
        http.server.requests: 50ms,100ms,200ms,500ms
        auth.jwt.duration: 10ms,25ms,50ms,100ms
        auth.login.duration: 100ms,500ms,1s,3s
        auth.validation.duration: 25ms,50ms,100ms,500ms
      percentiles-histogram:
        http.server.requests: true
        auth.jwt.duration: true
    tags:
      application: trademaster
      service: auth-service
      environment: ${spring.profiles.active:local}
      version: ${info.app.version:1.0.0}
  tracing:
    sampling:
      probability: 1.0
    zipkin:
      endpoint: ${ZIPKIN_URL:http://localhost:9411/api/v2/spans}