services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trademaster-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: trademaster_auth
      POSTGRES_USER: trademaster_user
      POSTGRES_PASSWORD: trademaster_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trademaster_user -d trademaster_auth"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: trademaster-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass trademaster_redis_pass
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # TradeMaster Authentication Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: trademaster-auth-service
    restart: unless-stopped
    environment:
      # Spring Profiles
      SPRING_PROFILES_ACTIVE: docker
      
      # Database Configuration
      DB_USERNAME: trademaster_user
      DB_PASSWORD: trademaster_password
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/trademaster_auth
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: trademaster_redis_pass
      
      # JWT Configuration
      JWT_SECRET: your-super-secret-jwt-key-for-production-change-this-to-256-bit-key
      JWT_EXPIRATION: 900000
      JWT_REFRESH_EXPIRATION: 86400000
      
      # Rate Limiting Configuration
      LOGIN_RATE_LIMIT: 5
      LOGIN_RATE_WINDOW: 1
      REGISTRATION_RATE_LIMIT: 3
      REGISTRATION_RATE_WINDOW: 60
      PASSWORD_RESET_RATE_LIMIT: 2
      PASSWORD_RESET_RATE_WINDOW: 60
      EMAIL_VERIFICATION_RATE_LIMIT: 10
      EMAIL_VERIFICATION_RATE_WINDOW: 60
      
      # AWS Configuration (for production)
      AWS_REGION: us-east-1
      AWS_KMS_KEY_ID: alias/trademaster-encryption-key
      
      # JVM Options
      JAVA_OPTS: -Xms512m -Xmx1024m -XX:+UseG1GC -XX:+UseContainerSupport
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trademaster-network
    volumes:
      - auth_logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/api/v1/auth/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: trademaster-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - auth-service
    networks:
      - trademaster-network
    profiles:
      - production

  # PostgreSQL Admin Interface (Optional - for development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: trademaster-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@trademaster.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - trademaster-network
    profiles:
      - development

  # Redis Commander (Optional - for development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: trademaster-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: redis:redis:6379:0:trademaster_redis_pass
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - trademaster-network
    profiles:
      - development

  # TradeMaster Frontend - React Registration Form with Storybook
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: development
    container_name: trademaster-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:8080/api/v1
      VITE_APP_NAME: TradeMaster
      VITE_APP_VERSION: 1.0.0
    ports:
      - "6006:6006"  # Storybook
      - "5173:5173"  # Vite dev server
    volumes:
      - .:/app
      - /app/node_modules
      - frontend_node_modules:/app/node_modules
    networks:
      - trademaster-network
    profiles:
      - development
      - frontend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6006 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend Production Build (Optional - for production testing)
  frontend-prod:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    container_name: trademaster-frontend-prod
    restart: unless-stopped
    ports:
      - "3000:80"  # Production build on port 3000
    networks:
      - trademaster-network
    profiles:
      - production
      - frontend-prod
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  auth_logs:
    driver: local
  frontend_node_modules:
    driver: local

# Custom network
networks:
  trademaster-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16