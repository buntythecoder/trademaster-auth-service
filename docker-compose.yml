# TradeMaster Complete Docker Compose Setup
services:
  # Infrastructure Services
  
  # Service Discovery
  eureka-server:
    build: ./infrastructure/eureka-server
    container_name: trademaster-eureka
    restart: unless-stopped
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - EUREKA_USERNAME=${EUREKA_USERNAME:-admin}
      - EUREKA_PASSWORD=${EUREKA_PASSWORD:-eureka123}
      - EUREKA_HOST=eureka-server
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Configuration Management
  config-server:
    build:
      context: ./infrastructure/config-server
      dockerfile: Dockerfile
    container_name: trademaster-config-server
    restart: unless-stopped
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8888:8888"
    environment:
      SPRING_PROFILES_ACTIVE: development
      CONFIG_SERVER_USER: ${CONFIG_SERVER_USER:-config-admin}
      CONFIG_SERVER_PASSWORD: ${CONFIG_SERVER_PASSWORD:-config-secret-2024}
      EUREKA_URI: http://eureka-server:8761/eureka/
      CONFIG_DB_USER: ${POSTGRES_USER:-trademaster}
      CONFIG_DB_PASSWORD: ${POSTGRES_PASSWORD:-trademaster123}
      ENCRYPT_KEY: ${CONFIG_ENCRYPT_KEY:-trademaster-symmetric-key-2024}
      GIT_USERNAME: ${GIT_USERNAME:-}
      GIT_PASSWORD: ${GIT_PASSWORD:-}
    volumes:
      - ./config-repo:/opt/config-repo:ro
      - ./logs/config-server:/var/log/trademaster
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Distributed Tracing
  zipkin:
    image: openzipkin/zipkin:2.24
    container_name: trademaster-zipkin
    restart: unless-stopped
    ports:
      - "9411:9411"
    environment:
      - STORAGE_TYPE=mem
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9411/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kong API Gateway
  kong-database:
    image: postgres:15
    container_name: kong-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: ${KONG_DB_PASSWORD:-kong123}
      POSTGRES_DB: kong
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migration:
    image: kong:3.4
    container_name: kong-migration
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kong123}
      KONG_PG_DATABASE: kong
    command: kong migrations bootstrap
    networks:
      - trademaster-network
    restart: "no"

  kong:
    image: kong:3.4
    container_name: trademaster-kong
    restart: unless-stopped
    depends_on:
      - kong-database
      - kong-migration
    ports:
      - "8000:8000"  # Proxy HTTP
      - "8443:8443"  # Proxy HTTPS
      - "8001:8001"  # Admin API HTTP
      - "8444:8444"  # Admin API HTTPS
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kong123}
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Infrastructure Services
  postgres:
    image: postgres:15
    container_name: trademaster-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: trademaster
      POSTGRES_USER: ${POSTGRES_USER:-trademaster}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-trademaster123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-trademaster}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: trademaster-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: trademaster-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - trademaster-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: trademaster-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: trademaster-elasticsearch
    restart: unless-stopped
    environment:
      - node.name=trademaster-es
      - cluster.name=trademaster-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:latest
    container_name: trademaster-minio
    restart: unless-stopped
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TradeMaster Services
  agent-orchestration-service:
    build:
      context: ./agent-orchestration-service
      dockerfile: Dockerfile
    container_name: trademaster-agent-orchestration
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8090:8090"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_URL: jdbc:postgresql://postgres:5432/trademaster_agentos
      DB_USERNAME: ${POSTGRES_USER:-trademaster}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-trademaster123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: ${JWT_SECRET:-default-jwt-secret-change-in-production}
    volumes:
      - ./logs/agent-orchestration:/app/logs
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/agent-os/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  broker-auth-service:
    build:
      context: ./broker-auth-service
      dockerfile: Dockerfile
    container_name: trademaster-broker-auth
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8087:8087"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DATABASE_URL: jdbc:postgresql://postgres:5432/trademaster_broker_auth
      DATABASE_USERNAME: ${POSTGRES_USER:-trademaster}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-trademaster123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      ENCRYPTION_KEY: ${BROKER_ENCRYPTION_KEY:-default-encryption-key-32-bytes}
      ZERODHA_APP_ID: ${ZERODHA_APP_ID:-}
      ZERODHA_API_SECRET: ${ZERODHA_API_SECRET:-}
      UPSTOX_CLIENT_ID: ${UPSTOX_CLIENT_ID:-}
      UPSTOX_CLIENT_SECRET: ${UPSTOX_CLIENT_SECRET:-}
      ANGEL_CLIENT_CODE: ${ANGEL_CLIENT_CODE:-}
      ANGEL_PASSWORD: ${ANGEL_PASSWORD:-}
      ANGEL_API_KEY: ${ANGEL_API_KEY:-}
      ANGEL_TOTP_SECRET: ${ANGEL_TOTP_SECRET:-}
    volumes:
      - ./logs/broker-auth:/app/logs
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/api/v1/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  behavioral-ai-service:
    build:
      context: ./behavioral-ai-service
      dockerfile: Dockerfile
    container_name: trademaster-behavioral-ai
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8085:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DATABASE_URL: jdbc:postgresql://postgres:5432/trademaster_behavioral_ai
      DATABASE_USERNAME: ${POSTGRES_USER:-trademaster}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-trademaster123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      JWT_ISSUER_URI: http://keycloak:8080/auth/realms/trademaster
      JWT_JWK_SET_URI: http://keycloak:8080/auth/realms/trademaster/protocol/openid-connect/certs
      ML_MODELS_PATH: /app/models
      CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3001
    volumes:
      - ./logs/behavioral-ai:/app/logs
      - ./ml-models:/app/models
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/behavioral-ai/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  ml-infrastructure-platform:
    build:
      context: ./ml-infrastructure-platform
      dockerfile: Dockerfile
    container_name: trademaster-ml-platform
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - "8088:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DATABASE_URL: jdbc:postgresql://postgres:5432/ml_platform
      DATABASE_USERNAME: ${POSTGRES_USER:-trademaster}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-trademaster123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      ML_INFRASTRUCTURE_MINIO_ENDPOINT: http://minio:9000
      ML_INFRASTRUCTURE_MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      ML_INFRASTRUCTURE_MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      ML_MLFLOW_TRACKING_URI: http://mlflow:5000
      ML_MLFLOW_REGISTRY_URI: http://mlflow:5000
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    volumes:
      - ./logs/ml-platform:/app/logs
      - ./ml-models:/app/models
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  market-data-service:
    build:
      context: ./market-data-service
      dockerfile: Dockerfile
    container_name: trademaster-market-data
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    ports:
      - "8082:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DATABASE_URL: jdbc:postgresql://postgres:5432/trademaster_market_data
      DATABASE_USERNAME: ${POSTGRES_USER:-trademaster}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-trademaster123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: 9200
    volumes:
      - ./logs/market-data:/app/logs
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: trademaster-notification
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8084:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DATABASE_URL: jdbc:postgresql://postgres:5432/trademaster_notifications
      DATABASE_USERNAME: ${POSTGRES_USER:-trademaster}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-trademaster123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID:-}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN:-}
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID:-}
      FIREBASE_PRIVATE_KEY: ${FIREBASE_PRIVATE_KEY:-}
      FIREBASE_CLIENT_EMAIL: ${FIREBASE_CLIENT_EMAIL:-}
    volumes:
      - ./logs/notification:/app/logs
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  risk-management-service:
    build:
      context: ./risk-management-service
      dockerfile: Dockerfile
    container_name: trademaster-risk-management
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8086:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DATABASE_URL: jdbc:postgresql://postgres:5432/trademaster_risk_management
      DATABASE_USERNAME: ${POSTGRES_USER:-trademaster}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-trademaster123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    volumes:
      - ./logs/risk-management:/app/logs
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  payment-gateway-service:
    build:
      context: ./payment-gateway-service
      dockerfile: Dockerfile
    container_name: trademaster-payment-gateway
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8089:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DATABASE_URL: jdbc:postgresql://postgres:5432/trademaster_payments
      DATABASE_USERNAME: ${POSTGRES_USER:-trademaster}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-trademaster123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      RAZORPAY_KEY_ID: ${RAZORPAY_KEY_ID:-}
      RAZORPAY_KEY_SECRET: ${RAZORPAY_KEY_SECRET:-}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY:-}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-}
      PAYU_MERCHANT_KEY: ${PAYU_MERCHANT_KEY:-}
      PAYU_MERCHANT_SALT: ${PAYU_MERCHANT_SALT:-}
    volumes:
      - ./logs/payment-gateway:/app/logs
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MLflow for ML Infrastructure Platform
  mlflow:
    image: python:3.11-slim
    container_name: trademaster-mlflow
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - "5000:5000"
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://${POSTGRES_USER:-trademaster}:${POSTGRES_PASSWORD:-trademaster123}@postgres:5432/mlflow
      MLFLOW_DEFAULT_ARTIFACT_ROOT: s3://ml-platform/mlflow-artifacts
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    command: >
      bash -c "
        pip install mlflow psycopg2-binary boto3 &&
        mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri postgresql://${POSTGRES_USER:-trademaster}:${POSTGRES_PASSWORD:-trademaster123}@postgres:5432/mlflow --default-artifact-root s3://ml-platform/mlflow-artifacts
      "
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend (from existing setup)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: development
    container_name: trademaster-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:8087/api/v1
      VITE_APP_NAME: TradeMaster
      VITE_APP_VERSION: 1.0.0
    ports:
      - "6006:6006"  # Storybook
      - "5173:5173"  # Vite dev server
    volumes:
      - .:/app
      - /app/node_modules
      - frontend_node_modules:/app/node_modules
    networks:
      - trademaster-network
    profiles:
      - development
      - frontend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6006 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: trademaster-nginx
    restart: unless-stopped
    depends_on:
      - agent-orchestration-service
      - broker-auth-service
      - behavioral-ai-service
      - ml-infrastructure-platform
      - market-data-service
      - notification-service
      - risk-management-service
      - payment-gateway-service
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development Tools (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: trademaster-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@trademaster.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - trademaster-network
    profiles:
      - development

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: trademaster-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: redis:redis:6379:0:${REDIS_PASSWORD:-redis123}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - trademaster-network
    profiles:
      - development

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  kong_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  elasticsearch_data:
    driver: local
  minio_data:
    driver: local
  frontend_node_modules:
    driver: local

# Custom network
networks:
  trademaster-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16