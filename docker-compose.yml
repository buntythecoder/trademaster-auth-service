# Docker Compose file for TradeMaster Infrastructure Only (for testing)

services:
  # Consul Service Discovery
  consul:
    image: consul:1.15.4
    ports:
      - "8500:8500"
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    command: >
      consul agent
      -server
      -ui
      -node=consul-server
      -bootstrap-expect=1
      -client=0.0.0.0
      -data-dir=/consul/data
      -config-dir=/consul/config
    volumes:
      - consul_data:/consul/data
    networks:
      - trademaster-network
    restart: unless-stopped

  # Shared PostgreSQL Database for all services
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: trademaster_main
      POSTGRES_USER: trademaster_admin
      POSTGRES_PASSWORD: trademaster_secure_pass
      # Initialize multiple databases
      POSTGRES_MULTIPLE_DATABASES: trademaster_trading,trademaster_portfolio,trademaster_users,trademaster_broker_auth,trademaster_notifications,trademaster_payments,trademaster_subscriptions,trademaster_agents,trademaster_eventbus,kong
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/01-init-databases.sh:ro
    networks:
      - trademaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trademaster_admin -d trademaster_main"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for Caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trademaster-network
    restart: unless-stopped

  # Consul Configuration Setup (one-time job)
  consul-config-setup:
    image: curlimages/curl:latest
    depends_on:
      consul:
        condition: service_started
    volumes:
      - ./scripts:/scripts
    networks:
      - trademaster-network
    command: sh -c "
      echo 'Waiting for Consul to be ready...';
      until curl -s http://consul:8500/v1/status/leader > /dev/null 2>&1; do 
        echo 'Waiting for Consul...'; 
        sleep 2; 
      done;
      echo 'Consul is ready, setting up configuration...';
      sh /scripts/consul-config-setup.sh"
    restart: "no"

  # Kong Gateway Database Migration (using shared PostgreSQL)
  kong-migrations:
    image: kong:3.9.1
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - trademaster-network
    restart: "no"

  # Kong Gateway - Enterprise Configuration
  kong:
    image: kong:3.9.1
    user: "${KONG_USER:-kong}"
    environment:
      # Database Configuration
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_SSL: "off"
      KONG_PG_SSL_VERIFY: "off"
      
      # Logging Configuration
      KONG_LOG_LEVEL: info
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ACCESS_LOG_FORMAT: '{"timestamp":"$$time_iso8601","client":"$$remote_addr","method":"$$request_method","uri":"$$request_uri","status":$$status,"size":$$body_bytes_sent,"referer":"$$http_referer","agent":"$$http_user_agent","request_time":$$request_time,"upstream_time":"$$upstream_response_time","correlation_id":"$$http_x_correlation_id"}'
      
      # Admin and Proxy Configuration  
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_STATUS_LISTEN: 0.0.0.0:8100
      
      # Performance and Scaling
      KONG_WORKER_PROCESSES: "auto"
      KONG_WORKER_CONNECTIONS: 1024
      KONG_MAX_FILES_LIMIT: 4096
      KONG_UPSTREAM_KEEPALIVE_POOL_SIZE: 60
      KONG_UPSTREAM_KEEPALIVE_MAX_REQUESTS: 100
      KONG_UPSTREAM_KEEPALIVE_IDLE_TIMEOUT: 60
      
      # Security Configuration
      KONG_REAL_IP_HEADER: "X-Forwarded-For"
      KONG_REAL_IP_RECURSIVE: "on"
      KONG_TRUSTED_IPS: "0.0.0.0/0,::/0"
      KONG_SERVER_TOKENS: "off"
      
      # Plugin Configuration
      KONG_PLUGINS: "bundled,prometheus,cors,rate-limiting,request-size-limiting,response-transformer,ip-restriction,jwt,key-auth,acl,request-termination,correlation-id"
      # KONG_PLUGINSERVER_NAMES: "go,python"  # Disabled - using bundled plugins only
      
      # Kong Manager UI Configuration
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002, 0.0.0.0:8445 ssl
      KONG_ADMIN_GUI_URL: http://localhost:8002
      
      # Development/Debug (disable in production)
      KONG_NGINX_HTTP_LUA_CODE_CACHE: "on"
      KONG_ANONYMOUS_REPORTS: "off"
      
      # Custom headers for financial compliance
      KONG_NGINX_HTTP_REAL_IP_HEADER: "X-Forwarded-For"
      KONG_NGINX_HTTP_REAL_IP_RECURSIVE: "on"
      
    ports:
      - "8000:8000"    # Kong Proxy HTTP
      - "8443:8443"    # Kong Proxy HTTPS
      - "8001:8001"    # Kong Admin API HTTP
      - "8444:8444"    # Kong Admin API HTTPS
      - "8100:8100"    # Kong Status API
      - "8002:8002"  # Kong Manager UI
      - "8445:8445"  # Kong Manager HTTPS
    depends_on:
      postgres:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    networks:
      - trademaster-network
    volumes:
      # Mount Kong configuration and scripts
      - ./kong:/kong:ro
      - ./scripts/configure-kong.sh:/usr/local/bin/configure-kong.sh:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Event Bus Service (Java 24) - Real-time event processing and WebSocket connections
  event-bus-service:
    build:
      context: ./event-bus-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"    # Main service port
      - "9081:9081"    # Management port
    environment:
      - SPRING_PROFILES_ACTIVE=consul,docker
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - DATABASE_URL=jdbc:postgresql://postgres:5432/trademaster_eventbus
      - DATABASE_USERNAME=trademaster_admin
      - DATABASE_PASSWORD=trademaster_secure_pass
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - ZIPKIN_ENDPOINT=http://zipkin:9411/api/v2/spans
      - HOST_IP=event-bus-service
      - JAVA_TOOL_OPTIONS=--enable-preview -Dorg.gradle.jvmargs="--enable-preview"
      - SERVER_PORT=8081
      - MANAGEMENT_SERVER_PORT=9081
      # WebSocket and Event Bus specific configuration
      - WEBSOCKET_ENABLED=true
      - WEBSOCKET_MAX_CONNECTIONS=10000
      - EVENT_STORE_ENABLED=true
      - EVENT_RETENTION_DAYS=30
    depends_on:
      consul:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - trademaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Trading Service (Java 24)
  trading-service:
    build:
      context: ./trading-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
      - "9083:9083"  # Management port
    environment:
      - SPRING_PROFILES_ACTIVE=consul,docker
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - DATABASE_URL=jdbc:postgresql://postgres:5432/trademaster_trading
      - DATABASE_USERNAME=trading_user
      - DATABASE_PASSWORD=trading_pass
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - HOST_IP=trading-service
      - JAVA_TOOL_OPTIONS=--enable-preview -Dorg.gradle.jvmargs="--enable-preview"
      - SERVER_PORT=8083
      - MANAGEMENT_SERVER_PORT=9083
    depends_on:
      consul:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - trademaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Konga - Advanced Kong Admin UI  
  konga:
    image: pantsel/konga:0.14.9
    ports:
      - "1337:1337"
    environment:
      NODE_ENV: production
      KONGA_HOOK_TIMEOUT: 120000
      KONGA_LOG_LEVEL: info
      DB_ADAPTER: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: trademaster_admin
      DB_PASSWORD: trademaster_secure_pass
      DB_DATABASE: kong
      KONGA_SEED_USER_DATA_SOURCE_FILE: /app/seedData.js
    volumes:
      - konga_data:/app/kongadata
      - ./scripts/konga-seed.js:/app/seedData.js:ro
    depends_on:
      kong:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - trademaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:1337", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - trademaster-network
    restart: unless-stopped

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - trademaster-network
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_started

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - trademaster-network
    restart: unless-stopped

  # Kafka Message Queue
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - trademaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:29092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Zipkin for Distributed Tracing
  zipkin:
    image: openzipkin/zipkin:latest
    ports:
      - "9411:9411"
    networks:
      - trademaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9411/health", "||", "exit", "1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

volumes:
  consul_data:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  konga_data:

networks:
  trademaster-network:
    driver: bridge