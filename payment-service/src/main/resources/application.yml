# Import common library configuration (serves as defaults)
# Service-specific properties below will override common defaults
spring:
  config:
    import: optional:classpath:application-common.yml

  application:
    name: payment-service

server:
  port: 8085
  servlet:
    context-path: /api/v1

spring:

  # MANDATORY: Virtual Threads Configuration
  threads:
    virtual:
      enabled: true

  # Consul Service Discovery Configuration
  cloud:
    consul:
      enabled: true
      host: ${CONSUL_HOST:consul}
      port: ${CONSUL_PORT:8500}
      discovery:
        enabled: true
        register: true
        deregister: true
        prefer-ip-address: true
        health-check-path: /actuator/health
        health-check-interval: 10s
        health-check-timeout: 5s
        health-check-critical-timeout: 30s
        fail-fast: false
        query-passing: true
        catalog-services-watch-delay: 1000
        catalog-services-watch-timeout: 2
      config:
        enabled: true
        format: YAML
        default-context: application
        profile-separator: ','
        data-key: data
        watch:
          enabled: true
          delay: 1000
  
  # Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/trademaster_payment
    username: trademaster_user
    password: trademaster_password
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 50  # Optimized for Virtual Threads
      minimum-idle: 10       # Standards compliant
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 25
        order_inserts: true
        order_updates: true
        jdbc:
          batch_versioned_data: true
        connection:
          handling_mode: delayed_acquisition_and_release_after_transaction  # Virtual Threads optimization
  
  # Flyway Configuration
  flyway:
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
  
  # Redis Configuration
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  # Security Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8081/api/v1/auth
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
    consumer:
      group-id: payment-service
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.trademaster.payment.events"

# Payment Gateway Configuration
payment:
  razorpay:
    key-id: ${RAZORPAY_KEY_ID:rzp_test_placeholder}
    key-secret: ${RAZORPAY_KEY_SECRET:placeholder_secret}
    webhook-secret: ${RAZORPAY_WEBHOOK_SECRET:placeholder_webhook_secret}
    currency: INR
    timeout: 30000
  
  stripe:
    publishable-key: ${STRIPE_PUBLISHABLE_KEY:pk_test_placeholder}
    secret-key: ${STRIPE_SECRET_KEY:sk_test_placeholder}
    webhook-secret: ${STRIPE_WEBHOOK_SECRET:whsec_placeholder}
    currency: USD
    timeout: 30000
  
  # Payment Configuration
  retry:
    max-attempts: 3
    backoff-delay: 1000
  
  webhook:
    timeout: 10000
    retry-attempts: 3

# MANDATORY: Resilience4j Configuration - Rule #24
resilience4j:
  circuitbreaker:
    metrics:
      enabled: true
    instances:
      payment-gateway:
        failure-rate-threshold: 50.0
        sliding-window-size: 10
        minimum-number-of-calls: 5
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        record-exceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
          - org.springframework.web.client.ResourceAccessException
      razorpay-service:
        failure-rate-threshold: 60.0
        sliding-window-size: 15
        minimum-number-of-calls: 8
        wait-duration-in-open-state: 60s
      stripe-service:
        failure-rate-threshold: 40.0
        sliding-window-size: 20
        minimum-number-of-calls: 10
        wait-duration-in-open-state: 45s
  
  retry:
    instances:
      payment-gateway:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
      razorpay-service:
        max-attempts: 2
        wait-duration: 2s
      stripe-service:
        max-attempts: 4
        wait-duration: 500ms
        exponential-backoff-multiplier: 1.5
  
  timelimiter:
    instances:
      payment-gateway:
        timeout-duration: 10s
        cancel-running-future: true
      razorpay-service:
        timeout-duration: 15s
        cancel-running-future: true
      stripe-service:
        timeout-duration: 12s
        cancel-running-future: true

# Security Configuration
security:
  payment:
    encryption:
      algorithm: AES
      key-length: 256
    token-expiry: 3600

# TradeMaster Security Configuration - Kong Integration
trademaster:
  security:
    # Internal API Key for service-to-service authentication
    internal-api-key: ${INTERNAL_API_KEY:trademaster_internal_dev_key}

  # Service URLs for internal communication
  services:
    portfolio-service-url: ${PORTFOLIO_SERVICE_URL:http://localhost:8083}
    subscription-service-url: ${SUBSCRIPTION_SERVICE_URL:http://localhost:8084}
    notification-service-url: ${NOTIFICATION_SERVICE_URL:http://localhost:8086}
    trading-service-url: ${TRADING_SERVICE_URL:http://localhost:8082}

  # Kong API Gateway Configuration
  kong:
    gateway-url: ${KONG_GATEWAY_URL:http://localhost:8000}
    admin-url: ${KONG_ADMIN_URL:http://localhost:8001}
    health-check-path: /api/v2/health
    service-name: payment-service

# Rate Limiting Configuration
rate-limiting:
  payment:
    capacity: 100
    tokens: 10
    refill-period: 60

# MANDATORY: Enhanced Monitoring Configuration per TradeMaster Standards
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,threaddump,heapdump
      base-path: /actuator
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
        step: 1m
        descriptions: true
    distribution:
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
        payments.processing.duration: 0.5, 0.95, 0.99
        refunds.processing.duration: 0.5, 0.95, 0.99
        webhooks.processing.duration: 0.5, 0.95, 0.99
      slo:
        http.server.requests: 50ms,100ms,200ms,500ms
        payments.processing.duration: 100ms,500ms,1s,5s
        refunds.processing.duration: 100ms,500ms,1s,5s
    tags:
      application: trademaster
      service: payment-service
      environment: ${spring.profiles.active:local}

# OpenAPI / Swagger Configuration
springdoc:
  api-docs:
    path: /v3/api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    disable-swagger-default-url: true
    display-request-duration: true
    tags-sorter: alpha
    operations-sorter: alpha
    doc-expansion: none
    default-models-expand-depth: 1
    default-model-rendering: model
    filter: true
  show-actuator: true
  default-produces-media-type: application/json
  default-consumes-media-type: application/json

# Logging Configuration
logging:
  level:
    com.trademaster.payment: DEBUG
    org.springframework.security: INFO
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# Custom Application Properties
app:
  payment:
    success-redirect-url: ${FRONTEND_URL:http://localhost:3000}/payment/success
    cancel-redirect-url: ${FRONTEND_URL:http://localhost:3000}/payment/cancel
    webhook-base-url: ${WEBHOOK_BASE_URL:http://localhost:8085}/api/v1/webhooks
  
  notification:
    email:
      enabled: true
      template-path: classpath:templates/email/
    sms:
      enabled: false
  
  audit:
    enabled: true
    retention-days: 2555  # 7 years for financial compliance