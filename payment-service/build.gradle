plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.flywaydb.flyway' version '10.0.0'
}

group = 'com.trademaster'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

repositories {
    mavenCentral()
}

// MANDATORY: Java 24 Preview Features per TradeMaster Standards
tasks.named('compileJava') {
    options.compilerArgs += ['--enable-preview']
}

tasks.named('compileTestJava') {
    options.compilerArgs += ['--enable-preview']
}

tasks.named('test') {
    jvmArgs += ['--enable-preview']
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
    }
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += ['--enable-preview']
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    razorpayVersion = '1.4.3'
    stripeVersion = '24.16.0'
    testcontainersVersion = '1.19.3'
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    
    // Database
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    
    // Payment Gateways
    implementation "com.razorpay:razorpay-java:${razorpayVersion}"
    implementation "com.stripe:stripe-java:${stripeVersion}"
    
    // Security & Encryption
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.bouncycastle:bcprov-jdk18on:1.77'
    
    // Webhook Signature Verification
    implementation 'commons-codec:commons-codec:1.16.0'
    
    // Rate Limiting
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.6.0'
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-redis:7.6.0'
    
    // Monitoring & Observability
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    
    // Structured Logging
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    implementation 'ch.qos.logback:logback-classic'
    implementation 'ch.qos.logback:logback-core'
    
    // Utilities
    implementation 'org.apache.commons:commons-lang3'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    
    // JSON handling for Hibernate
    implementation 'io.hypersistence:hypersistence-utils-hibernate-60:3.6.0'
    
    // API Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    
    // Jakarta annotations
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    
    // Event Publishing
    implementation 'org.springframework:spring-context'
    implementation 'org.springframework.kafka:spring-kafka'
    
    // Development
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation 'com.h2database:h2'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.awaitility:awaitility'
}


// Flyway configuration
flyway {
    url = 'jdbc:postgresql://localhost:5432/trademaster_payment'
    user = 'trademaster_user'
    password = 'trademaster_password'
    locations = ['classpath:db/migration']
    baselineOnMigrate = true
    validateOnMigrate = true
}

// Boot run configuration
bootRun {
    jvmArgs = [
        "-Dspring.threads.virtual.enabled=true",
        "--enable-preview"
    ]
}

// Spring Boot configuration
springBoot {
    mainClass = 'com.trademaster.payment.PaymentServiceApplication'
    buildInfo()
}

// Security scan task
task securityScan {
    doLast {
        println "Running security vulnerability scan..."
        // Add OWASP dependency check or similar security scanning
    }
}

// Custom task for database setup
task setupDatabase {
    group = 'database'
    description = 'Sets up the PostgreSQL database for development'
    doLast {
        println "Database setup completed. Run 'gradle flywayMigrate' to apply migrations."
    }
}