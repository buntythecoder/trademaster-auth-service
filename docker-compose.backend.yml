# Docker Compose for TradeMaster Backend Services
# Includes: event-bus-service, trading-service with core infrastructure
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: trademaster_main
      POSTGRES_USER: trademaster_admin
      POSTGRES_PASSWORD: trademaster_secure_pass
      POSTGRES_MULTIPLE_DATABASES: trademaster_trading,trademaster_eventbus,trademaster_users,trademaster_agents,kong
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/01-init-databases.sh:ro
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trademaster_admin -d trademaster_main"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for Caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Consul Service Discovery
  consul:
    image: consul:1.15.4
    ports:
      - "8500:8500"
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    command: >
      consul agent
      -server
      -ui
      -node=consul-server
      -bootstrap-expect=1
      -client=0.0.0.0
      -data-dir=/consul/data
      -config-dir=/consul/config
    volumes:
      - consul_data:/consul/data
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka (Event Streaming)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - backend-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Event Bus Service
  event-bus-service:
    build:
      context: ./event-bus-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
      - "9081:9081"  # Management port
    environment:
      - SPRING_PROFILES_ACTIVE=consul,docker
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - DATABASE_URL=jdbc:postgresql://postgres:5432/trademaster_eventbus
      - DATABASE_USERNAME=trademaster_admin
      - DATABASE_PASSWORD=trademaster_secure_pass
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - HOST_IP=event-bus-service
      - JAVA_TOOL_OPTIONS=--enable-preview -Dorg.gradle.jvmargs="--enable-preview"
      - SERVER_PORT=8081
      - MANAGEMENT_SERVER_PORT=9081
      - SPRING_THREADS_VIRTUAL_ENABLED=true
      - SPRING_FLYWAY_ENABLED=true
      - SPRING_FLYWAY_LOCATIONS=classpath:db/migration
      - SPRING_JPA_HIBERNATE_DDL_AUTO=validate
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - MANAGEMENT_TRACING_ENABLED=true
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
      - MANAGEMENT_TRACING_SAMPLING_PROBABILITY=1.0
      # Service-to-Service Authentication (Kong Dynamic API Keys)
      - SERVICE_AUTH_ENABLED=true
      - KONG_API_GATEWAY_URL=http://kong:8000
      - KONG_ADMIN_URL=http://kong:8001
      - KONG_SECRETS_DIR=/kong/secrets
      - SERVICE_NAME=events
      - SERVICE_KEY_DISCOVERY_ENABLED=true
      - SERVICE_TO_SERVICE_AUTH_HEADER=X-API-Key
      # Internal Service URLs (via Kong Gateway)
      - TRADING_SERVICE_INTERNAL_URL=http://kong:8000/internal/trading
      - MARKET_DATA_INTERNAL_URL=http://kong:8000/internal/market-data
      - RISK_SERVICE_INTERNAL_URL=http://kong:8000/internal/risk
      - PORTFOLIO_SERVICE_INTERNAL_URL=http://kong:8000/internal/portfolio
      - NOTIFICATION_SERVICE_INTERNAL_URL=http://kong:8000/internal/notification
      - AUDIT_SERVICE_INTERNAL_URL=http://kong:8000/internal/audit
    volumes:
      - kong_secrets:/kong/secrets:ro
    depends_on:
      consul:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Trading Service
  trading-service:
    build:
      context: ./trading-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
      - "9083:9083"  # Management port
    environment:
      - SPRING_PROFILES_ACTIVE=consul,docker
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - DATABASE_URL=jdbc:postgresql://postgres:5432/trademaster_trading
      - DATABASE_USERNAME=trademaster_admin
      - DATABASE_PASSWORD=trademaster_secure_pass
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - EVENT_BUS_URL=http://event-bus-service:8081
      - HOST_IP=trading-service
      - JAVA_TOOL_OPTIONS=--enable-preview -Dorg.gradle.jvmargs="--enable-preview"
      - SERVER_PORT=8083
      - MANAGEMENT_SERVER_PORT=9083
      - SPRING_THREADS_VIRTUAL_ENABLED=true
      - MANAGEMENT_TRACING_ENABLED=true
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
      - MANAGEMENT_TRACING_SAMPLING_PROBABILITY=1.0
      - SPRING_FLYWAY_ENABLED=true
      - SPRING_FLYWAY_LOCATIONS=classpath:db/migration
      - SPRING_JPA_HIBERNATE_DDL_AUTO=validate
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,metrics,info,prometheus,circuitbreakers
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
      - MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true
      - MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED=true
      # Service-to-Service Authentication (Kong Dynamic API Keys)
      - SERVICE_AUTH_ENABLED=true
      - KONG_API_GATEWAY_URL=http://kong:8000
      - KONG_ADMIN_URL=http://kong:8001
      - KONG_SECRETS_DIR=/kong/secrets
      - SERVICE_NAME=trading
      - SERVICE_KEY_DISCOVERY_ENABLED=true
      - SERVICE_TO_SERVICE_AUTH_HEADER=X-API-Key
      # Internal Service URLs (via Kong Gateway)
      - EVENT_BUS_INTERNAL_URL=http://kong:8000/internal/events
      - MARKET_DATA_INTERNAL_URL=http://kong:8000/internal/market-data
      - RISK_SERVICE_INTERNAL_URL=http://kong:8000/internal/risk
      - PORTFOLIO_SERVICE_INTERNAL_URL=http://kong:8000/internal/portfolio
      - NOTIFICATION_SERVICE_INTERNAL_URL=http://kong:8000/internal/notification
      - AUDIT_SERVICE_INTERNAL_URL=http://kong:8000/internal/audit
    volumes:
      - kong_secrets:/kong/secrets:ro
    depends_on:
      consul:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Zipkin for Distributed Tracing
  zipkin:
    image: openzipkin/zipkin:latest
    ports:
      - "9411:9411"
    environment:
      - STORAGE_TYPE=mem
      - JAVA_OPTS=-Xms512m -Xmx512m
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9411/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong Database Migration (using shared PostgreSQL)
  kong-migrations:
    image: kong:3.9.1
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend-network
    restart: "no"

  # Kong Enterprise API Gateway with PostgreSQL
  kong:
    image: kong:3.9.1
    environment:
      # Database Configuration
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
      - KONG_PG_PORT=5432
      - KONG_PG_DATABASE=kong
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      # Networking
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_ADMIN_GUI_LISTEN=0.0.0.0:8002
      - KONG_ADMIN_GUI_URL=http://localhost:8002
      - KONG_STATUS_LISTEN=0.0.0.0:8100
      # Performance & Security
      - KONG_NGINX_WORKER_PROCESSES=auto
      # Plugins (Enhanced for API Key Authentication)
      - KONG_PLUGINS=bundled,prometheus,rate-limiting,jwt,key-auth,cors,ip-restriction,response-transformer,correlation-id,acl,request-size-limiting
      # Logging
      - KONG_LOG_LEVEL=info
    ports:
      - "8000:8000"    # Kong proxy
      - "8001:8001"    # Kong admin API  
      - "8002:8002"    # Kong admin GUI
      - "8100:8100"    # Kong status
      - "8443:8443"    # Kong proxy SSL
      - "8444:8444"    # Kong admin API SSL
    volumes:
      - ./kong:/kong/config:rw
      - kong_secrets:/kong/config/secrets
    networks:
      - backend-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Kong Dynamic API Key Setup Service
  kong-dynamic-key-setup:
    image: curlimages/curl:8.1.2
    command: >
      sh -c "
        apk add --no-cache bash jq openssl &&
        chmod +x /kong/config/kong-dynamic-key-setup.sh &&
        /kong/config/kong-dynamic-key-setup.sh
      "
    volumes:
      - ./kong:/kong/config:rw
      - kong_secrets:/kong/config/secrets
    networks:
      - backend-network
    depends_on:
      kong:
        condition: service_healthy
    restart: "no"
    environment:
      - KONG_ADMIN_URL=http://kong:8001
      - KONG_SECRETS_DIR=/kong/config/secrets

  # Service Key Discovery Helper
  service-key-discovery:
    image: curlimages/curl:8.1.2
    command: >
      sh -c "
        apk add --no-cache bash jq &&
        chmod +x /kong/config/service-key-discovery.sh &&
        echo 'Key discovery service ready. Services can discover keys using:' &&
        echo '  /kong/config/service-key-discovery.sh --service [SERVICE_NAME]' &&
        tail -f /dev/null
      "
    volumes:
      - ./kong:/kong/config:ro
      - kong_secrets:/kong/config/secrets:ro
    networks:
      - backend-network
    depends_on:
      kong-dynamic-key-setup:
        condition: service_completed_successfully
    restart: unless-stopped
    environment:
      - KONG_ADMIN_URL=http://kong:8001
      - KONG_SECRETS_DIR=/kong/config/secrets


  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - backend-network
    restart: unless-stopped

  # Grafana for Dashboards and Visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=trademaster_admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      prometheus:
        condition: service_started
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  consul_data:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:
  prometheus_data:
  grafana_data:
  kong_secrets:

networks:
  backend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16