plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.flywaydb.flyway' version '9.22.3'
}

group = 'com.trademaster'
version = '1.0.0'
sourceCompatibility = '21'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


ext {
    jjwtVersion = '0.12.5'
    testcontainersVersion = '1.19.3'
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    
    // Database
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    
    // JWT
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
    
    // Redis
    implementation 'org.springframework.session:spring-session-data-redis'
    
    // Encryption & Security
    implementation 'org.bouncycastle:bcprov-jdk18on:1.77'
    implementation 'software.amazon.awssdk:kms:2.21.29'
    
    // Rate Limiting
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.6.0'
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-redis:7.6.0'
    
    // MFA & OTP
    implementation 'com.warrenstrange:googleauth:1.5.0'
    implementation 'com.twilio.sdk:twilio:9.14.1'
    
    // Monitoring & Observability
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    
    // Utilities
    implementation 'org.apache.commons:commons-lang3'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    
    // JSON handling for Hibernate
    implementation 'io.hypersistence:hypersistence-utils-hibernate-60:3.6.0'
    
    // API Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    
    // Jakarta annotations (replacement for javax.annotation)
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    
    // Development
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation 'com.h2database:h2'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.awaitility:awaitility'
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
    }
}

// Flyway configuration
flyway {
    url = 'jdbc:postgresql://localhost:5432/trademaster_auth'
    user = 'trademaster_user'
    password = 'trademaster_password'
    locations = ['classpath:db/migration']
    baselineOnMigrate = true
    validateOnMigrate = true
}

// JVM configuration for Java 21
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

compileJava {
    options.compilerArgs += [
        '--enable-preview'
    ]
}

// Spring Boot configuration
springBoot {
    mainClass = 'com.trademaster.auth.AuthServiceApplication'
    buildInfo()
}

// Security scan task
task securityScan {
    doLast {
        println "Running security vulnerability scan..."
        // Add OWASP dependency check or similar security scanning
    }
}

// Custom task for database setup
task setupDatabase {
    group = 'database'
    description = 'Sets up the PostgreSQL database for development'
    doLast {
        println "Database setup completed. Run 'gradle flywayMigrate' to apply migrations."
    }
}